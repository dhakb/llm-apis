import "dotenv/config";

import { z } from "zod";
import { generateText } from "ai";
import { openai } from "@ai-sdk/openai";



// as we have seem similar approach in interface for providing tools to the model, letting know the function definition, description.
// we also provie the function itself to the model to execute. we have no more code needed to invoke the function as it's handled by the generateText() api.

// as we needed for the application needs we have access to the tool calls generated by the model.



const { toolCalls } = await generateText({
  model: openai("gpt-4o-mini"),
  messages: [
    {
      role: "user",
      content: "Add song 'summer day' by artist 'breakpoint' to my playlist.",
    },
  ],
  tools: {
    add_to_playlist: {
      description: "Add a song to the user's playlist.",
      inputSchema: z.object({
        artist_name: z.string(),
        song_title: z.string(),
      }),
      execute: async ({ artist_name, song_title }) => {
        console.log(
          `Adding song '${song_title}' by artist '${artist_name}' to the playlist`
        );
        return "Added to playlist!";
      },
    },
  },
});


console.log("toolCalls::", toolCalls);